from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from app.core.database import Base


class MatrixEntry(Base):
    """
    Traceability Matrix Entry model
    Contains the generated traceability information for each requirement
    Generated by Step 2 of AI workflow (local Llama model)
    """
    __tablename__ = "matrix_entries"

    id = Column(Integer, primary_key=True, index=True)

    # Requirement relationship
    requirement_id = Column(Integer, ForeignKey("requirements.id"), nullable=False, index=True)

    # Document relationship - tracks which document this matrix entry was generated from
    document_id = Column(Integer, ForeignKey("documents.id"), nullable=False, index=True)
    
    # Traceability Matrix fields
    spec_reference = Column(Text, nullable=True)  # Reference to supplier spec
    supplier_response = Column(Text, nullable=True)  # How supplier addresses requirement
    justification = Column(Text, nullable=True)  # Rationale for traceability
    compliance_status = Column(String(50), nullable=True, index=True)  # Compliant, Non-compliant, etc.
    
    # Additional fields for comprehensive traceability
    test_reference = Column(Text, nullable=True)  # Link to test cases
    risk_assessment = Column(Text, nullable=True)  # Risk analysis
    comments = Column(Text, nullable=True)  # Additional notes
    
    # AI generation metadata
    generation_model = Column(String(100), nullable=True)  # Track which model was used
    generated_at = Column(DateTime(timezone=True), nullable=True)
    generation_prompt = Column(Text, nullable=True)  # Store prompt for audit
    generation_metadata = Column(JSON, nullable=True)  # Additional AI metadata
    
    # Review and approval workflow
    review_status = Column(String(50), default="pending", index=True)  # pending, reviewed, approved
    reviewer_comments = Column(Text, nullable=True)
    approved_at = Column(DateTime(timezone=True), nullable=True)
    approved_by = Column(Integer, ForeignKey("users.id"), nullable=True)
    
    # GxP compliance fields
    created_by = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    last_modified_by = Column(Integer, ForeignKey("users.id"), nullable=True, index=True)
    
    # Electronic signature support (21 CFR Part 11)
    electronic_signature = Column(String(255), nullable=True)
    signature_timestamp = Column(DateTime(timezone=True), nullable=True)
    
    # GxP timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Soft delete for compliance
    deleted_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    requirement = relationship("Requirement", back_populates="matrix_entries")
    document = relationship("Document", back_populates="matrix_entries")
    created_by_user = relationship(
        "User",
        back_populates="matrix_entries_created",
        foreign_keys=[created_by]
    )
    last_modified_by_user = relationship(
        "User",
        back_populates="matrix_entries_modified",
        foreign_keys=[last_modified_by]
    )
    approved_by_user = relationship(
        "User",
        foreign_keys=[approved_by]
    )
    
    def __repr__(self):
        return f"<MatrixEntry(id={self.id}, requirement_id={self.requirement_id}, status='{self.review_status}')>"
    
    @property
    def is_approved(self) -> bool:
        """Check if entry has been approved"""
        return self.review_status == "approved" and self.approved_at is not None
    
    @property
    def is_compliant(self) -> bool:
        """Check if requirement is marked as compliant"""
        return self.compliance_status and self.compliance_status.lower() == "compliant"